% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/http.R
\name{.BuildApiCommand}
\alias{.BuildApiCommand}
\title{Assembles command that will be sent to the TBA Read API}
\usage{
.BuildApiCommand(args, api_templates, extent = "full")
}
\arguments{
\item{args}{A named character vector containing parameter-argument
pairs.}

\item{api_templates}{A named list containing TBA API calls.}

\item{extent}{Optional. A string that should be "full", "simple",
or "keys". Defaults to "full".}
}
\value{
The TBA command as a length-one character vector.
}
\description{
`.BuildApiCommand()` builds a correctly-formatted TBA command that can be
sent to *The Blue Alliance's* (TBA) Read API, version 3. It accepts two
arguments: a list of TBA API templates and a character vector with
arguments supplied by the user. `.BuildAPICommand()` builds a
correctly-formatted TBA command from these two objects.
}
\details{
## TBA Commands
The command is the latter portion of the URL. Specifically, it is
everything in the URL after "https://www.thebluealliance.com/api/v3".
Consider the following URL:
`https://www.thebluealliance.com/api/v3/district/2020pnw/teams`
The command is `district/2020pnw/teams`. This particular command will
return a JSON object with all FRC teams that were active in the Pacific
Northwest in 2020. The specifications for all TBA Read API commands are
at https://www.thebluealliance.com/apidocs/v3.

Each command consists of segments separated by forward slashes. A
segment can be either an argument or an option.
* An argument is a value that is provided by the user. Arguments specify
  individual teams, events, matches, districts, etc. Examples include
  "2020wasno" (event), "frc1318" (team), and "2020pnw" (district).
  Commands can contain up to two arguments.
* Options are string constants that specify how the argument is
  interpreted by the TBA API and what data should be returned. Examples
  of options include "team", "districts", "events",  etc.

## API Calls
An API call is an element in a named list. When combined with arguments
supplied by the user, it contains all information needed to build a TBA
command. Here are example API calls from the `GetDistricts()` and
`GetMatches()` functions:

```
# GetDistricts() API Calls
list("{year}" = c("districts", "{year}"),
     "{team_key}" = c("team", "{team_key}", "districts")
)
# GetMatches() API Calls
list("{team_key}{event_key}" = c("team", "{team_key}",
                                 "event", "{event_key}",
                                 "matches"),
     "{event_key}{team_key}" = c("team", "{team_key}",
                                 "event", "{event_key}",
                                 "matches")
)
```
Each character vector in the list contains segments in the order
required by TBA. The segments enclosed in curly braces are parameters
and the rest are options. Parameters are placeholders for user-supplied
arguments. The parameter value specifies the type of data
(i.e., team key, year, event key, etc.) that is allowed in that TBA
command.

The name of each list element consists of the arguments
that are used by that API call. For `GetMatches()`, which accepts
two arguments, the API call is listed a second time with the order
of arguments in its name reversed. This allows users to reverse the
order of the arguments when they call `GetMatches()`.

## Arguments
Arguments are passed to `.BuildApiCommand()` as a named character vector.
For example:

`c("{team_key} = "frc1318", "{event_key}" = "2020wasno")`

The vector names are parameters and the values are the corresponding
arguments.

## Extent Argument
One argument is treated specially. Several TBA API calls accept an
optional final segment that can either be "simple" or "keys". Fewer
columns of data are returned if the "simple" segment is added. Only
one column of data is returned if the "keys" segment is added.
The column contains a list of keys, e.g., district keys, team keys,
match keys, etc.
}
